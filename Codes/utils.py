import numpy as np
import cv2

# To count the number of pixels that belong to each cluster
def centroid_histogram(clt):
    '''
    To goal of this function is to create a histogram, based on the pixels assigned to each cluster
    :param clt: Different number of clusters as command line argument
    :return: Returns the histogram
    '''

    # Histogram is created based on the number of pixels assigned to each cluster.
    numLabels = np.arange(0, len(np.unique(clt.labels_))+1)
    (hist,_) = np.histogram(clt.labels_,bins = numLabels)

    # Normalize the histogram, such that it sums to one
    hist = hist.astype("float")
    hist /= hist.sum()

    #Histogram
    return hist

def plot_colors(hist,centroids):

    '''
    :Description : 1. Plotting the desired color accordinng to the number of pixels belonging to eachg cluster
                   2. Plotting the dominant colors based on the clusters
                   3. Defining a 300x50 pixel rectangle to hold the most dominant colors as pointed out by K-Means
                   4. Plotting based on the Color Distribution
    :param hist: The histogram generated from centroid_histogram function.
    :param centroids: List of centroids (Cluster Centers), generated by K-Means clustering algorithm
    :return:
    '''

    bar = np.zeros((50,300,3),dtype = "uint8")
    startX = 0

    # Percentage of each color based on each cluster and the respective color of each cluster.
    for (percent,color) in zip(hist,centroids):
        endX = startX + (percent * 300) # Ending point of a cluster distribiution
        cv2.rectangle(bar, (int(startX), 0), (int(endX), 50),color.astype("uint8").tolist(), -1)
        # -1 px -> Thickness -> Basically fill the rectangle shape by specified color
        startX = endX

    return bar






